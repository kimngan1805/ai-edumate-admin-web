# utils/minio_connection.py
import os
from minio import Minio
from minio.error import S3Error
import logging
from typing import Optional, List

# C·∫•u h√¨nh logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class MinIOConnection:
    """Class ƒë·ªÉ qu·∫£n l√Ω k·∫øt n·ªëi v·ªõi MinIO"""
    
    def __init__(self, endpoint="127.000.1:9000", access_key="minioadmin", secret_key="minioadmin", secure=False):
        """
        Kh·ªüi t·∫°o k·∫øt n·ªëi MinIO
        
        Args:
            endpoint (str): MinIO endpoint
            access_key (str): Access key
            secret_key (str): Secret key  
            secure (bool): S·ª≠ d·ª•ng HTTPS hay kh√¥ng
        """
        self.endpoint = endpoint
        self.access_key = access_key
        self.secret_key = secret_key
        self.secure = secure
        self.client: Optional[Minio] = None
        
    def connect(self):
        """T·∫°o k·∫øt n·ªëi v·ªõi MinIO server"""
        try:
            self.client = Minio(
                endpoint=self.endpoint,
                access_key=self.access_key,
                secret_key=self.secret_key,
                secure=self.secure
            )
            logger.info(f"‚úÖ K·∫øt n·ªëi th√†nh c√¥ng t·ªõi MinIO server: {self.endpoint}")
            return True
        except Exception as e:
            logger.error(f"‚ùå L·ªói k·∫øt n·ªëi MinIO: {str(e)}")
            return False
    
    def test_connection(self) -> bool:
        """Test k·∫øt n·ªëi b·∫±ng c√°ch list buckets"""
        if not self.client:
            logger.error("‚ùå Ch∆∞a c√≥ k·∫øt n·ªëi MinIO. Vui l√≤ng g·ªçi connect() tr∆∞·ªõc")
            return False
            
        try:
            # Explicit type check ƒë·ªÉ tr√°nh IDE warning
            client: Minio = self.client
            
            # List all buckets
            buckets = client.list_buckets()
            
            print("\n" + "="*50)
            print("üóÇÔ∏è  DANH S√ÅCH BUCKETS TRONG MINIO")
            print("="*50)
            
            if buckets:
                for bucket in buckets:
                    print(f"üìÅ Bucket: {bucket.name}")
                    print(f"   üìÖ T·∫°o l√∫c: {bucket.creation_date}")
                    print(f"   üîó Endpoint: {self.endpoint}")
                    print("-" * 30)
            else:
                print("üì≠ Kh√¥ng c√≥ bucket n√†o trong MinIO")
                
            print("="*50)
            print(f"‚úÖ K·∫øt n·ªëi th√†nh c√¥ng! T·ªïng c·ªông {len(buckets)} bucket(s)")
            return True
            
        except S3Error as e:
            logger.error(f"‚ùå L·ªói S3: {e}")
            return False
        except Exception as e:
            logger.error(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")
            return False
    
    def create_bucket(self, bucket_name: str) -> bool:
        """T·∫°o bucket m·ªõi"""
        if not self.client:
            logger.error("‚ùå Ch∆∞a c√≥ k·∫øt n·ªëi MinIO")
            return False
            
        try:
            # Explicit type check ƒë·ªÉ tr√°nh IDE warning
            client: Minio = self.client
            
            if not client.bucket_exists(bucket_name):
                client.make_bucket(bucket_name)
                logger.info(f"‚úÖ T·∫°o bucket '{bucket_name}' th√†nh c√¥ng")
                return True
            else:
                logger.info(f"‚ÑπÔ∏è  Bucket '{bucket_name}' ƒë√£ t·ªìn t·∫°i")
                return True
        except Exception as e:
            logger.error(f"‚ùå L·ªói t·∫°o bucket: {e}")
            return False
    
    def list_objects(self, bucket_name: str, prefix: str = "") -> List[str]:
        """List objects trong bucket"""
        if not self.client:
            logger.error("‚ùå Ch∆∞a c√≥ k·∫øt n·ªëi MinIO")
            return []
            
        try:
            # Explicit type check ƒë·ªÉ tr√°nh IDE warning
            client: Minio = self.client
            objects = client.list_objects(bucket_name, prefix=prefix)
            object_list = []
            
            print(f"\nüìÇ Objects trong bucket '{bucket_name}':")
            print("-" * 40)
            
            for obj in objects:
                print(f"üìÑ {obj.object_name} (Size: {obj.size} bytes)")
                object_list.append(obj.object_name)
                
            return object_list
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói list objects: {e}")
            return []
        
    # --- ƒê√ÇY L√Ä V·ªä TR√ç ƒê√öNG C·ª¶A H√ÄM list_common_prefixes ---
    # ƒê·∫£m b·∫£o h√†m n√†y ƒë∆∞·ª£c th·ª•t v√†o ƒë√∫ng c·∫•p ƒë·ªô c·ªßa c√°c ph∆∞∆°ng th·ª©c kh√°c trong class MinIOConnection
    def list_common_prefixes(self, bucket_name: str, prefix: str = "") -> List[str]:
        """
        List common prefixes (simulating folders) within a bucket using a fallback method
        if 'delimiter' is not supported.
        This method is less efficient for large buckets.
        """
        if not self.client:
            logger.error("‚ùå Ch∆∞a c√≥ k·∫øt n·ªëi MinIO.")
            return []

        try:
            client: Minio = self.client

            # --- THAY TH·∫æ LOGIC LIST FOLDERS ·ªû ƒê√ÇY ---
            # C·ªë g·∫Øng s·ª≠ d·ª•ng delimiter tr∆∞·ªõc, n·∫øu l·ªói th√¨ d√πng fallback
            try:
                # ƒê√¢y l√† c√°ch ∆∞u ti√™n, cho phi√™n b·∫£n Minio 7.x.x
                objects_iterator = client.list_objects(bucket_name, prefix=prefix, delimiter='/') # type: ignore
                folders = []
                for obj in objects_iterator:
                    if obj.is_dir: # obj.is_dir ch·ªâ c√≥ s·∫µn khi d√πng delimiter
                        folders.append(obj.object_name)
                
                logger.info(f"‚úÖ ƒê√£ t·∫£i danh s√°ch common prefixes/folders t·ª´ bucket '{bucket_name}' d∆∞·ªõi prefix '{prefix}' b·∫±ng delimiter. T√¨m th·∫•y {len(folders)}.")
                return folders

            except TypeError as te:
                # N·∫øu TypeError xu·∫•t hi·ªán (do 'delimiter' kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£)
                if "unexpected keyword argument 'delimiter'" in str(te):
                    logger.warning(f"‚ö†Ô∏è Phi√™n b·∫£n MinIO client kh√¥ng h·ªó tr·ª£ 'delimiter' cho list_objects. ƒêang d√πng ph∆∞∆°ng ph√°p fallback. L·ªói: {te}")
                    
                    # Ph∆∞∆°ng ph√°p fallback: Li·ªát k√™ t·∫•t c·∫£ objects v√† t·ª± ph√¢n t√≠ch prefixes
                    all_objects = client.list_objects(bucket_name, prefix=prefix, recursive=True)
                    found_prefixes = set()
                    
                    for obj in all_objects:
                        # object_name v√≠ d·ª•: "thpt/toan/detai/file.pdf"
                        # C·∫ßn t√¨m ti·ªÅn t·ªë ngay sau 'prefix' ban ƒë·∫ßu
                        relative_name = obj.object_name[len(prefix):] # type: ignore
                        if '/' in relative_name:
                            # L·∫•y ph·∫ßn tr∆∞·ªõc d·∫•u '/' ƒë·∫ßu ti√™n
                            first_slash_index = relative_name.find('/')
                            top_level_prefix = relative_name[:first_slash_index + 1] # C·ªông 1 ƒë·ªÉ gi·ªØ d·∫•u '/'
                            found_prefixes.add(prefix + top_level_prefix)
                    
                    folders = sorted(list(found_prefixes))
                    logger.info(f"‚úÖ ƒê√£ t·∫£i danh s√°ch common prefixes/folders t·ª´ bucket '{bucket_name}' d∆∞·ªõi prefix '{prefix}' b·∫±ng fallback. T√¨m th·∫•y {len(folders)}.")
                    return folders
                else:
                    raise te # N·∫øu l√† TypeError kh√°c, th√¨ re-raise

        except S3Error as e:
            logger.error(f"‚ùå L·ªói S3 khi l·∫•y danh s√°ch folder: {e}")
            return []
        except Exception as e:
            logger.error(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh khi l·∫•y danh s√°ch folder: {e}")
            return []
def main():
    """H√†m test k·∫øt n·ªëi MinIO"""
    print("üîå TESTING MINIO CONNECTION")
    print("=" * 50)
    
    # Kh·ªüi t·∫°o k·∫øt n·ªëi
    minio_conn = MinIOConnection()
    
    # K·∫øt n·ªëi
    if minio_conn.connect():
        # Test k·∫øt n·ªëi
        minio_conn.test_connection()
        
        # T·∫°o bucket demo (optional)
        demo_bucket = "ai-education-demo"
        minio_conn.create_bucket(demo_bucket)
        
        # List objects trong bucket (n·∫øu c√≥)
        minio_conn.list_objects(demo_bucket)
        
    else:
        print("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi MinIO server")
        print("üìã Ki·ªÉm tra l·∫°i:")
        print("   - MinIO server ƒëang ch·∫°y ch∆∞a?")
        print("   - Endpoint c√≥ ƒë√∫ng kh√¥ng?")
        print("   - Access key v√† secret key c√≥ ƒë√∫ng kh√¥ng?")

if __name__ == "__main__":
    main()