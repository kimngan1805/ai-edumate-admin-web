// Global variables
let selectedDataSource = null;
let selectedFiles = [];
let processingInterval = null;
let currentFileMetadata = null; // TH√äM BI·∫æN N√ÄY ƒê·ªÇ L∆ØU METADATA HI·ªÜN T·∫†I
let minioFilesToProcess = []; // D√πng khi ch·ªçn t·ª´ MinIO folder
// TH√äM: Bi·∫øn global cho ch·ª©c nƒÉng folder
let folderFiles = []; // Danh s√°ch file trong folder
let currentFolderFileIndex = 0; // Index c·ªßa file hi·ªán t·∫°i trong folder
let folderMetadataList = []; // Danh s√°ch metadata c·ªßa t·∫•t c·∫£ file trong folder
let isProcessingFolder = false; // Flag ƒë·ªÉ bi·∫øt ƒëang x·ª≠ l√Ω folder hay file ƒë∆°n// NEW GLOBAL VARIABLES FOR SIMULATED RESULTS
let simulatedTotalFilesProcessed = 0;
let simulatedSuccessfullyDownloadedFiles = 0;
let simulatedFailedDownloadFiles = []; // Array of {fileName: string, error: string}
let simulatedTotalChunksGenerated = 0;
let simulatedTotalProcessingTimeMs = 0;
let simulatedProcessStartTime = null;
// TH√äM: Variable ƒë·ªÉ track pipeline processing
let pipelineEventSource = null;
let representativeFile = null;
let mongodbInfo = null;
// DOM elements
const fileDropZone = document.getElementById('fileDropZone');
const fileInput = document.getElementById('fileInput');
const chooseFileButton = document.getElementById('chooseFileButton');
const loadFolderButton = document.getElementById('loadFolderButton');
const minioFolderSelect = document.getElementById('minioFolderSelect');
const startProcessingBtn = document.getElementById('startProcessingBtn');
const sourceStatus = document.getElementById('sourceStatus');
const sourceInfo = document.getElementById('sourceInfo');
const defaultMessage = document.getElementById('defaultMessage');
const finalResults = document.getElementById('finalResults');
const finalResultsContent = document.getElementById('finalResultsContent');
const metadataPreviewBox = document.getElementById('metadataPreviewBox');
const saveToMinioBtn = document.getElementById('saveToMinioBtn'); // Th√™m n√∫t save
// TH√äM: DOM elements cho folder
const folderInput = document.getElementById('folderInput');
const chooseFolderButton = document.getElementById('chooseFolderButton');
const folderInfoBox = document.getElementById('folderInfoBox');
const folderName = document.getElementById('folderName');
const totalFiles = document.getElementById('totalFiles');
const currentFileIndex = document.getElementById('currentFileIndex');
const totalFilesDisplay = document.getElementById('totalFilesDisplay');
const folderNavigationButtons = document.getElementById('folderNavigationButtons');
const prevFileBtn = document.getElementById('prevFileBtn');
const nextFileBtn = document.getElementById('nextFileBtn');
const saveAllToMinioBtn = document.getElementById('saveAllToMinioBtn');

// Progress Step Boxes (assuming these IDs are in your HTML)
const stepBox1 = document.getElementById('stepBox1'); // Load data
const loadDataDescription = stepBox1 ? stepBox1.querySelector('.step-description') : null;

const stepBox2 = document.getElementById('stepBox2'); // Data Extraction
const stepBox3 = document.getElementById('stepBox3'); // Chunking
const stepBox4 = document.getElementById('stepBox4'); // Embedding
const stepBox5 = document.getElementById('stepBox5'); // Save DB

// Progress Arrows (assuming these IDs are in your HTML)
const arrow1 = document.getElementById('arrow1');
const arrow2 = document.getElementById('arrow2');
const arrow3 = document.getElementById('arrow3');
const arrow4 = document.getElementById('arrow4');

// New DOM elements for the initial forms (based on your screenshots)
const dataSourceContainer = document.getElementById('dataSourceContainer'); // Khung ch·ªçn ngu·ªìn d·ªØ li·ªáu (khung 1)
const processingSection = document.getElementById('processingSection'); // Khung hi·ªÉn th·ªã k·∫øt qu·∫£ x·ª≠ l√Ω (khung 2)


// Helper to format Select2 options with icons
function formatFolderOption(folder) {
    if (!folder.id) {
        return folder.text;
    }
    return $('<span>üìÅ ' + folder.text + '</span>');
}

document.addEventListener('DOMContentLoaded', function() {
    initializeEventListeners();
    // ·∫®n c√°c ph·∫ßn kh√¥ng c·∫ßn thi·∫øt ban ƒë·∫ßu
    if (saveAllToMinioBtn) saveAllToMinioBtn.style.display = 'none'; // TH√äM
    if (folderInfoBox) folderInfoBox.style.display = 'none'; // TH√äM
    if (folderNavigationButtons) folderNavigationButtons.style.display = 'none'; // TH√äM
    if (processingSection) processingSection.style.display = 'none';
    if (metadataPreviewBox) metadataPreviewBox.style.display = 'none';
    if (saveToMinioBtn) saveToMinioBtn.style.display = 'none';
    if (startProcessingBtn) {
        startProcessingBtn.style.display = 'none';
        startProcessingBtn.classList.remove('btn-primary'); // ƒê·∫£m b·∫£o ban ƒë·∫ßu kh√¥ng c√≥ m√†u active
        startProcessingBtn.classList.add('btn-secondary'); // M·∫∑c ƒë·ªãnh l√† m√†u x√°m (disabled look)
    }
    if (finalResults) finalResults.style.display = 'none'; // ƒê·∫£m b·∫£o k·∫øt qu·∫£ cu·ªëi c√πng ·∫©n ban ƒë·∫ßu

    // Initialize Select2 if it's not already initialized
    if (minioFolderSelect) {
        if ($(minioFolderSelect).data('select2')) {
            $(minioFolderSelect).select2('destroy');
        }
        $(minioFolderSelect).select2({
            templateResult: formatFolderOption,
            templateSelection: formatFolderOption,
            placeholder: "-- Choose folder --",
            allowClear: true
        });
    }
});

function initializeEventListeners() {
    if (chooseFileButton) {
        chooseFileButton.addEventListener('click', () => {
            // Clear the file input value before clicking, to ensure change event fires even if same file is selected
            if (fileInput) fileInput.value = ''; 
            if (fileInput) fileInput.click();
        });
    }

    if (fileInput) {
        fileInput.addEventListener('change', handleFileSelection);
    }

    if (fileDropZone) {
        fileDropZone.addEventListener('dragover', handleDragOver);
        fileDropZone.addEventListener('dragleave', handleDragLeave);
        fileDropZone.addEventListener('drop', handleFileDrop);
    }

    if (minioFolderSelect) {
        $(minioFolderSelect).on('change', handleMinioFolderSelection); // PH·∫¢I L√Ä handleMinioFolderSelection
    }

    if (loadFolderButton) {
        loadFolderButton.addEventListener('click', loadFolderList);
    }

    if (startProcessingBtn) {
        startProcessingBtn.addEventListener('click', startProcessing);
    }

    if (saveToMinioBtn) {
        saveToMinioBtn.addEventListener('click', saveToMinio);
    }
    // L·∫Øng nghe s·ª± ki·ªán click cho n√∫t "Ch·ªçn file kh√°c"
    const resetUploadBtn = document.querySelector('.btn-reset-upload'); 
    if (resetUploadBtn) {
        resetUploadBtn.addEventListener('click', resetUpload);
    }
    // TH√äM: Event listener cho n√∫t ch·ªçn folder
    if (chooseFolderButton) {
        chooseFolderButton.addEventListener('click', () => {
            if (folderInput) folderInput.value = '';
            if (folderInput) folderInput.click();
        });
    }
    // TH√äM: Event listener cho folder input
    if (folderInput) {
        folderInput.addEventListener('change', handleFolderSelection);
    }

    // TH√äM: Event listeners cho folder navigation
    if (prevFileBtn) {
        prevFileBtn.addEventListener('click', () => navigateFolderFile(-1));
    }
    if (nextFileBtn) {
        nextFileBtn.addEventListener('click', () => navigateFolderFile(1));
    }
    if (saveAllToMinioBtn) {
        saveAllToMinioBtn.addEventListener('click', saveAllFolderFilesToMinio);
    }
}


// TH√äM: H√†m x·ª≠ l√Ω ch·ªçn folder
function handleFolderSelection(e) {
    const files = Array.from(e.target.files);
    if (files.length > 0) {
        // L·ªçc ch·ªâ l·∫•y file c√≥ extension h·ªó tr·ª£
        const supportedFiles = files.filter(file => {
            const ext = file.name.toLowerCase().split('.').pop();
            return ['pdf', 'docx', 'pptx', 'txt'].includes(ext);
        });

        if (supportedFiles.length === 0) {
            alert('Kh√¥ng t√¨m th·∫•y file h·ªó tr·ª£ trong folder. H·ªó tr·ª£: PDF, DOCX, PPTX, TXT');
            return;
        }

        folderFiles = supportedFiles;
        currentFolderFileIndex = 0;
        folderMetadataList = [];
        isProcessingFolder = true;
        selectedDataSource = 'folder-upload';

        // Hi·ªÉn th·ªã th√¥ng tin folder
        const folderPath = supportedFiles[0].webkitRelativePath.split('/')[0];
        if (folderName) folderName.textContent = folderPath;
        if (totalFiles) totalFiles.textContent = supportedFiles.length;
        if (totalFilesDisplay) totalFilesDisplay.textContent = supportedFiles.length;
        if (folderInfoBox) folderInfoBox.style.display = 'block';
        if (folderNavigationButtons) folderNavigationButtons.style.display = 'block';

        updateSourceStatus(`ƒê√£ ch·ªçn folder "${folderPath}" v·ªõi ${supportedFiles.length} file(s)`);
        
        // B·∫Øt ƒë·∫ßu suy lu·∫≠n metadata cho file ƒë·∫ßu ti√™n
        inferAndShowMetadataForCurrentFolderFile();
        
        // ƒê·∫£m b·∫£o Select2 c·ªßa MinIO reset
        if (minioFolderSelect) $(minioFolderSelect).val(null).trigger('change');

        // HI·ªÇN TH·ªä V√Ä ACTIVE N√öT START NGAY L·∫¨P T·ª®C KHI CH·ªåN FOLDER
        showStartButton();
        if (startProcessingBtn) {
            startProcessingBtn.disabled = false;
        }

    } else {
        console.log("Ng∆∞·ªùi d√πng kh√¥ng ch·ªçn folder n√†o.");
        if (!selectedDataSource || selectedDataSource === 'folder-upload') {
            resetUpload(); 
        }
    }
}

// TH√äM: H√†m suy lu·∫≠n metadata cho file hi·ªán t·∫°i trong folder
// TH√äM: H√†m suy lu·∫≠n metadata cho file hi·ªán t·∫°i trong folder
async function inferAndShowMetadataForCurrentFolderFile() {
    if (currentFolderFileIndex >= folderFiles.length) return;

    const currentFile = folderFiles[currentFolderFileIndex];
    
    // C·∫≠p nh·∫≠t th√¥ng tin file hi·ªán t·∫°i
    if (currentFileIndex) currentFileIndex.textContent = currentFolderFileIndex + 1;
    
    // ·∫®n upload option v√† hi·ªÉn th·ªã metadata box
    const uploadOption = document.getElementById('uploadOption');
    if (uploadOption) uploadOption.style.display = 'none';
    if (metadataPreviewBox) metadataPreviewBox.style.display = 'block';

    // C·∫≠p nh·∫≠t n√∫t navigation
    if (prevFileBtn) prevFileBtn.disabled = currentFolderFileIndex === 0;
    if (nextFileBtn) nextFileBtn.disabled = currentFolderFileIndex === folderFiles.length - 1;

    // Ki·ªÉm tra n·∫øu metadata ƒë√£ ƒë∆∞·ª£c suy lu·∫≠n cho file n√†y
    if (folderMetadataList[currentFolderFileIndex]) {
        displayMetadata(folderMetadataList[currentFolderFileIndex].metadata, currentFile);
        
        // S·ª¨A: TH√äM d√≤ng n√†y ƒë·ªÉ hi·ªÉn th·ªã n√∫t save cho file ƒë√£ c√≥ metadata
        showSaveButtonsForFolder();
        return;
    }

    // Hi·ªÉn th·ªã tr·∫°ng th√°i ƒëang suy lu·∫≠n
    const metaFilename = document.getElementById('metaFilename');
    const metaSubject = document.getElementById('metaSubject');
    const metaType = document.getElementById('metaType');
    const metaLevel = document.getElementById('metaLevel');
    const metaPages = document.getElementById('metaPages');

    if (metaFilename) metaFilename.textContent = currentFile.name;
    if (metaSubject) metaSubject.textContent = 'ƒêang suy lu·∫≠n...';
    if (metaType) metaType.textContent = 'ƒêang suy lu·∫≠n...';
    if (metaLevel) metaLevel.textContent = 'ƒêang suy lu·∫≠n...';
    if (metaPages) metaPages.textContent = 'ƒêang suy lu·∫≠n...';
    
    if (saveToMinioBtn) saveToMinioBtn.style.display = 'none';
    if (saveAllToMinioBtn) saveAllToMinioBtn.style.display = 'none';

    const formData = new FormData();
    formData.append('file', currentFile);

    try {
        const response = await fetch('/infer-metadata-only', { 
            method: 'POST',
            body: formData
        });
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(`Server error: ${response.status} - ${errorData.message}`);
        }
        const metadata = await response.json();
        console.log('Metadata nh·∫≠n ƒë∆∞·ª£c t·ª´ server:', metadata);

        // L∆∞u metadata v√†o danh s√°ch
        folderMetadataList[currentFolderFileIndex] = {
            metadata: metadata,
            file: currentFile
        };

        displayMetadata(metadata, currentFile);
        
        // Hi·ªÉn th·ªã n√∫t save sau khi metadata ho√†n th√†nh
        showSaveButtonsForFolder();

    } catch (error) {
        console.error('L·ªói khi suy lu·∫≠n metadata:', error);
        alert('L·ªói khi suy lu·∫≠n metadata: ' + error.message);
        if (metaSubject) metaSubject.textContent = 'L·ªói!';
        if (metaType) metaType.textContent = 'L·ªói!';
        if (metaLevel) metaLevel.textContent = 'L·ªói!';
        if (metaPages) metaPages.textContent = 'L·ªói!';
    }
}
// TH√äM: H√†m hi·ªÉn th·ªã metadata
// TH√äM: H√†m hi·ªÉn th·ªã metadata
function displayMetadata(metadata, file) {
    const metaFilename = document.getElementById('metaFilename');
    const metaSubject = document.getElementById('metaSubject');
    const metaType = document.getElementById('metaType');
    const metaLevel = document.getElementById('metaLevel');
    const metaPages = document.getElementById('metaPages');

    // S·ª¨A: Ki·ªÉm tra xem metadata c√≥ ph·∫£i l√† object b·ªçc ngo√†i kh√¥ng
    const actualMetadata = metadata.metadata || metadata;

    if (metaFilename) metaFilename.textContent = actualMetadata.original_filename || file.name;
    if (metaSubject) metaSubject.textContent = actualMetadata.gpt_subject_raw || 'Kh√¥ng x√°c ƒë·ªãnh';
    if (metaType) metaType.textContent = actualMetadata.gpt_content_type_raw || 'Kh√¥ng x√°c ƒë·ªãnh';
    if (metaLevel) metaLevel.textContent = actualMetadata.gpt_educational_level_raw || 'Kh√¥ng x√°c ƒë·ªãnh';
    if (metaPages) metaPages.textContent = actualMetadata.pages_count || 'Kh√¥ng x√°c ƒë·ªãnh';
}

// TH√äM: H√†m ƒëi·ªÅu h∆∞·ªõng trong folder
function navigateFolderFile(direction) {
    const newIndex = currentFolderFileIndex + direction;
    if (newIndex >= 0 && newIndex < folderFiles.length) {
        currentFolderFileIndex = newIndex;
        inferAndShowMetadataForCurrentFolderFile();
    }
}

// TH√äM: H√†m hi·ªÉn th·ªã n√∫t save cho folder
function showSaveButtonsForFolder() {
    if (saveToMinioBtn) {
        saveToMinioBtn.style.display = 'inline-flex';
        saveToMinioBtn.disabled = false;
        saveToMinioBtn.innerHTML = '<i class="fas fa-save"></i> L∆∞u file n√†y';
    }
    if (saveAllToMinioBtn) {
        saveAllToMinioBtn.style.display = 'inline-flex';
        saveAllToMinioBtn.disabled = false;
        saveAllToMinioBtn.innerHTML = '<i class="fas fa-save"></i> L∆∞u t·∫•t c·∫£ v√†o MinIO';
    }
}

// TH√äM: H√†m l∆∞u t·∫•t c·∫£ file trong folder v√†o MinIO
async function saveAllFolderFilesToMinio() {
    if (folderFiles.length === 0) {
        alert('Kh√¥ng c√≥ file n√†o ƒë·ªÉ l∆∞u!');
        return;
    }

    if (saveAllToMinioBtn) {
        saveAllToMinioBtn.disabled = true;
        saveAllToMinioBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> ƒêang l∆∞u t·∫•t c·∫£...';
    }

    let successCount = 0;
    let failCount = 0;
    const failedFiles = [];

    for (let i = 0; i < folderFiles.length; i++) {
        try {
            // N·∫øu ch∆∞a c√≥ metadata cho file n√†y, suy lu·∫≠n tr∆∞·ªõc
            if (!folderMetadataList[i]) {
                currentFolderFileIndex = i;
                await inferMetadataForFile(folderFiles[i], i);
            }

            if (folderMetadataList[i]) {
                await saveFileToMinio(folderMetadataList[i].file, folderMetadataList[i].metadata);
                successCount++;
            } else {
                failCount++;
                failedFiles.push(folderFiles[i].name);
            }
        } catch (error) {
            console.error(`L·ªói khi l∆∞u file ${folderFiles[i].name}:`, error);
            failCount++;
            failedFiles.push(folderFiles[i].name);
        }
    }

    // C·∫≠p nh·∫≠t selectedDataSource v√† minioFilesToProcess
    selectedDataSource = 'minio-saved-folder';
    minioFilesToProcess = folderMetadataList.map(item => ({
        name: item.metadata.original_filename,
        object_name: generateObjectName(item.metadata)
    }));

    // Hi·ªÉn th·ªã k·∫øt qu·∫£
    let message = `ƒê√£ l∆∞u ${successCount}/${folderFiles.length} file th√†nh c√¥ng`;
    if (failCount > 0) {
        message += `\nFile l·ªói: ${failedFiles.join(', ')}`;
    }
    alert(message);

    // C·∫≠p nh·∫≠t UI
    if (startProcessingBtn) {
        startProcessingBtn.classList.remove('btn-secondary');
        startProcessingBtn.classList.add('btn-primary');
        startProcessingBtn.disabled = false;
        startProcessingBtn.style.display = 'inline-flex';
    }
    updateSourceStatus(`ƒê√£ l∆∞u ${successCount} file t·ª´ folder v√†o MinIO. S·∫µn s√†ng ƒë·ªÉ x·ª≠ l√Ω.`);

    // ·∫®n metadata preview
    if (metadataPreviewBox) metadataPreviewBox.style.display = 'none';
    
    // Hi·ªÉn th·ªã l·∫°i upload option
    const uploadOption = document.getElementById('uploadOption');
    if (uploadOption) uploadOption.style.display = 'block';

    if (saveAllToMinioBtn) {
        saveAllToMinioBtn.disabled = false;
        saveAllToMinioBtn.innerHTML = '<i class="fas fa-save"></i> L∆∞u t·∫•t c·∫£ v√†o MinIO';
    }
}

// TH√äM: H√†m suy lu·∫≠n metadata cho file c·ª• th·ªÉ (kh√¥ng hi·ªÉn th·ªã UI)
async function inferMetadataForFile(file, index) {
    const formData = new FormData();
    formData.append('file', file);

    try {
        const response = await fetch('/infer-metadata-only', { 
            method: 'POST',
            body: formData
        });
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(`Server error: ${response.status} - ${errorData.message}`);
        }
        const metadata = await response.json();
        
        folderMetadataList[index] = {
            metadata: metadata,
            file: file
        };
        
        return metadata;
    } catch (error) {
        console.error(`L·ªói khi suy lu·∫≠n metadata cho file ${file.name}:`, error);
        throw error;
    }
}

// TH√äM: H√†m t·∫°o object name cho MinIO
function generateObjectName(metadata) {
    const level_path = metadata.gpt_educational_level || "khac";
    const subject_path = metadata.gpt_subject || "tong-hop";
    const doc_type_path = metadata.gpt_content_type || "tai-lieu-khac";
    const original_filename = metadata.original_filename;
    return `${level_path}/${subject_path}/${doc_type_path}/${original_filename}`;
}

// TH√äM: H√†m l∆∞u file ƒë∆°n l·∫ª v√†o MinIO
async function saveFileToMinio(file, metadata) {
    const formData = new FormData();
    formData.append('file', file);
    formData.append('metadata', JSON.stringify(metadata));

    const response = await fetch('/save-to-minio', {
        method: 'POST',
        body: formData
    });
    
    if (!response.ok) {
        const errorData = await response.json();
        throw new Error(`Server error: ${response.status} - ${errorData.message}`);
    }
    
    const result = await response.json();
    if (result.status !== 'success') {
        throw new Error(result.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh khi l∆∞u file');
    }
    
    return result;
}

// Hide/Show main sections
function hideInitialForms() {
    if (defaultMessage) defaultMessage.style.display = 'none';
}

function showInitialForms() {
    if (dataSourceContainer) dataSourceContainer.style.display = 'block';
    if (defaultMessage) defaultMessage.style.display = 'block';
}

function showProcessingSection() {
    if (processingSection) {
        processingSection.style.display = 'block';
        processingSection.scrollIntoView({ behavior: 'smooth', block: 'start' });
    }
}

// --- File selection (C·∫¨P NH·∫¨T TR·ªåNG T√ÇM)
// S·ª¨A: C·∫≠p nh·∫≠t handleFileSelection ƒë·ªÉ reset folder data
function handleFileSelection(e) {
    const files = Array.from(e.target.files);
    if (files.length > 0) {
        selectedFiles = files;
        selectedDataSource = 'upload';
        isProcessingFolder = false; // Reset folder flag
        folderFiles = []; // Reset folder data
        folderMetadataList = [];
        
        updateSourceStatus(`ƒê√£ ch·ªçn ${files.length} file(s) t·ª´ m√°y t√≠nh`);
        inferAndShowMetadata(files[0]);
        
        // ·∫®n th√¥ng tin folder n·∫øu c√≥
        if (folderInfoBox) folderInfoBox.style.display = 'none';
        if (folderNavigationButtons) folderNavigationButtons.style.display = 'none';
        
        if (minioFolderSelect) $(minioFolderSelect).val(null).trigger('change');
        showStartButton(); 
        if (startProcessingBtn) startProcessingBtn.disabled = false;
    } else {
        if (!selectedDataSource || selectedDataSource === 'upload') {
            resetUpload(); 
        }
    }
}

function handleFileDrop(e) {
    e.preventDefault();
    e.stopPropagation();
    fileDropZone.classList.remove('dragover');
    const files = Array.from(e.dataTransfer.files);
    if (files.length > 0) {
        selectedFiles = files;
        selectedDataSource = 'upload';
        isProcessingFolder = false; // Reset folder flag
        folderFiles = []; // Reset folder data
        folderMetadataList = [];
        
        updateSourceStatus(`ƒê√£ ch·ªçn ${files.length} file(s) qua drag & drop`);
        inferAndShowMetadata(files[0]);
        
        // ·∫®n th√¥ng tin folder n·∫øu c√≥
        if (folderInfoBox) folderInfoBox.style.display = 'none';
        if (folderNavigationButtons) folderNavigationButtons.style.display = 'none';
        
        if (minioFolderSelect) $(minioFolderSelect).val(null).trigger('change');
        showStartButton();
        if (startProcessingBtn) startProcessingBtn.disabled = false;
    }
}

function handleDragOver(e) {
    e.preventDefault();
    e.stopPropagation();
    fileDropZone.classList.add('dragover');
}

function handleDragLeave(e) {
    e.preventDefault();
    e.stopPropagation();
    fileDropZone.classList.remove('dragover');
}

// --- Metadata Preview (C·∫¨P NH·∫¨T)
async function inferAndShowMetadata(file) {
    const uploadOption = document.getElementById('uploadOption');
    if (uploadOption) {
        uploadOption.style.display = 'none';
    }
    if (metadataPreviewBox) {
        metadataPreviewBox.style.display = 'block';
    }
    const metaFilename = document.getElementById('metaFilename');
    const metaSubject = document.getElementById('metaSubject');
    const metaType = document.getElementById('metaType');
    const metaLevel = document.getElementById('metaLevel');
    const metaPages = document.getElementById('metaPages');

    if (metaFilename) metaFilename.textContent = file.name;
    if (metaSubject) metaSubject.textContent = 'ƒêang suy lu·∫≠n...';
    if (metaType) metaType.textContent = 'ƒêang suy lu·∫≠n...';
    if (metaLevel) metaLevel.textContent = 'ƒêang suy lu·∫≠n...';
    if (metaPages) metaPages.textContent = 'ƒêang suy lu·∫≠n...';
    if (saveToMinioBtn) saveToMinioBtn.style.display = 'none'; // ·∫®n n√∫t save khi ƒëang suy lu·∫≠n
    // N√∫t startProcessingBtn ƒë√£ ƒë∆∞·ª£c active ·ªü handleFileSelection/Drop, kh√¥ng c·∫ßn ·∫©n l·∫°i

    const formData = new FormData();
    formData.append('file', file);

    try {
        const response = await fetch('/infer-metadata-only', { 
            method: 'POST',
            body: formData
        });
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(`Server error: ${response.status} - ${errorData.message}`);
        }
        const metadata = await response.json();
        console.log('Metadata nh·∫≠n ƒë∆∞·ª£c t·ª´ server:', metadata);

        // L∆ØU METADATA V√ÄO BI·∫æN GLOBAL
        currentFileMetadata = {
            metadata: metadata,
            file: file
        };

        if (metaFilename) metaFilename.textContent = metadata.original_filename || file.name;
        if (metaSubject) metaSubject.textContent = metadata.gpt_subject_raw || 'Kh√¥ng x√°c ƒë·ªãnh';
        if (metaType) metaType.textContent = metadata.gpt_content_type_raw || 'Kh√¥ng x√°c ƒë·ªãnh';
        if (metaLevel) metaLevel.textContent = metadata.gpt_educational_level_raw || 'Kh√¥ng x√°c ƒë·ªãnh';
        if (metaPages) metaPages.textContent = metadata.pages_count || 'Kh√¥ng x√°c ƒë·ªãnh';

        // HI·ªÇN TH·ªä N√öT SAVE SAU KHI METADATA HO√ÄN TH√ÄNH
        showSaveButton();

    } catch (error) {
        console.error('L·ªói khi suy lu·∫≠n metadata:', error);
        alert('L·ªói khi suy lu·∫≠n metadata: ' + error.message + '\nVui l√≤ng ki·ªÉm tra console ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt.');
        if (metaSubject) metaSubject.textContent = 'L·ªói!';
        if (metaType) metaType.textContent = 'L·ªói!';
        if (metaLevel) metaLevel.textContent = 'L·ªói!';
        if (metaPages) metaPages.textContent = 'L·ªói!';
        if (saveToMinioBtn) saveToMinioBtn.style.display = 'none';
        
        // V·∫´n gi·ªØ n√∫t Start ProcessingBtn ƒë∆∞·ª£c hi·ªÉn th·ªã nh∆∞ng c√≥ th·ªÉ mu·ªën disable n√≥ n·∫øu c√≥ l·ªói metadata
        // Tuy nhi√™n theo √Ω b·ªë, n√∫t Start ch·ªâ ch·∫°y sau khi Save To MinIO, n√™n ta kh√¥ng c·∫ßn disable n√≥ ·ªü ƒë√¢y.
    }
}

// TH√äM H√ÄM HI·ªÇN TH·ªä N√öT SAVE
function showSaveButton() {
    if (saveToMinioBtn) {
        saveToMinioBtn.style.display = 'inline-flex';
        saveToMinioBtn.disabled = false;
        saveToMinioBtn.innerHTML = '<i class="fas fa-save"></i> L∆∞u v√†o MinIO';
    }
}

// TH√äM H√ÄM X·ª¨ L√ù SAVE TO MINIO
async function saveToMinio() {

    // N·∫øu ƒëang x·ª≠ l√Ω folder, l∆∞u file hi·ªán t·∫°i
    if (isProcessingFolder && folderMetadataList[currentFolderFileIndex]) {
        const currentFileData = folderMetadataList[currentFolderFileIndex];
        if (!currentFileData || !currentFileData.file || !currentFileData.metadata) {
            alert('Kh√¥ng c√≥ file ho·∫∑c metadata ƒë·ªÉ l∆∞u!');
            return;
        }
        
        if (saveToMinioBtn) {
            saveToMinioBtn.disabled = true;
            saveToMinioBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> ƒêang l∆∞u...';
        }

        try {
            await saveFileToMinio(currentFileData.file, currentFileData.metadata);
            alert(`ƒê√£ l∆∞u file "${currentFileData.file.name}" th√†nh c√¥ng v√†o MinIO!`);
        } catch (error) {
            console.error('L·ªói khi l∆∞u file v√†o MinIO:', error);
            alert('L·ªói khi l∆∞u file v√†o MinIO: ' + error.message);
        } finally {
            if (saveToMinioBtn) {
                saveToMinioBtn.disabled = false;
                saveToMinioBtn.innerHTML = '<i class="fas fa-save"></i> L∆∞u file n√†y';
            }
        }
        return;
    }
    if (!currentFileMetadata || !currentFileMetadata.file || !currentFileMetadata.metadata) {
        alert('Kh√¥ng c√≥ file ho·∫∑c metadata ƒë·ªÉ l∆∞u!');
        return;
    }
    
    if (saveToMinioBtn) {
        saveToMinioBtn.disabled = true;
        saveToMinioBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> ƒêang l∆∞u...';
    }

    const formData = new FormData();
    formData.append('file', currentFileMetadata.file);
    formData.append('metadata', JSON.stringify(currentFileMetadata.metadata));

    try {
        const response = await fetch('/save-to-minio', {
            method: 'POST',
            body: formData
        });
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(`Server error: ${response.status} - ${errorData.message}`);
        }
        const result = await response.json();
        console.log('K·∫øt qu·∫£ l∆∞u MinIO:', result);
        if (result.status === 'success') {
            alert('ƒê√£ l∆∞u file th√†nh c√¥ng v√†o MinIO!');
            
            selectedDataSource = 'minio-saved-file'; // ƒê√°nh d·∫•u l√† file ƒë√£ l∆∞u v√†o minio
            minioFilesToProcess = [{
                name: currentFileMetadata.metadata.original_filename,
                object_name: result.object_name // ƒê·∫£m b·∫£o backend tr·∫£ v·ªÅ object_name
            }];
            // N√∫t "B·∫Øt ƒë·∫ßu x·ª≠ l√Ω" ƒë√£ s√°ng t·ª´ khi ch·ªçn file, kh√¥ng c·∫ßn g·ªçi showStartButton() l·∫°i
            // Ch·ªâ c·∫ßn ƒë·∫£m b·∫£o n√≥ v·∫´n ƒëang ·ªü tr·∫°ng th√°i active (m√†u t√≠m)
            if (startProcessingBtn) {
                startProcessingBtn.classList.remove('btn-secondary');
                startProcessingBtn.classList.add('btn-primary');
                startProcessingBtn.disabled = false;
                startProcessingBtn.style.display = 'inline-flex'; // ƒê·∫£m b·∫£o n√≥ hi·ªÉn th·ªã
            }
            updateSourceStatus(`ƒê√£ l∆∞u file: "${minioFilesToProcess[0].name}" v√†o MinIO. S·∫µn s√†ng ƒë·ªÉ x·ª≠ l√Ω.`);
            
            // ·∫®n metadata preview v√† n√∫t save sau khi l∆∞u
            if (metadataPreviewBox) metadataPreviewBox.style.display = 'none';
            if (saveToMinioBtn) saveToMinioBtn.style.display = 'none';

            // HI·ªÇN TH·ªä L·∫†I KHUNG T·∫¢I FILE M·ªöI L√äN (n·∫øu mu·ªën cho ph√©p t·∫£i ti·∫øp)
            const uploadOption = document.getElementById('uploadOption');
            if (uploadOption) {
                uploadOption.style.display = 'block';
            }
            // Clear the file input for a new upload
            if (fileInput) fileInput.value = '';

        } else {
            throw new Error(result.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh khi l∆∞u file');
        }

    } catch (error) {
        console.error('L·ªói khi l∆∞u file v√†o MinIO:', error);
        alert('L·ªói khi l∆∞u file v√†o MinIO: ' + error.message);
    } finally {
        if (saveToMinioBtn) {
            saveToMinioBtn.disabled = false;
            saveToMinioBtn.innerHTML = '<i class="fas fa-save"></i> L∆∞u v√†o MinIO';
        }
    }
}

function resetUpload() {
    selectedFiles = [];
    minioFilesToProcess = [];
    folderFiles = []; // TH√äM: Reset folder data
    folderMetadataList = []; // TH√äM: Reset folder metadata
    currentFolderFileIndex = 0; // TH√äM: Reset folder index
    isProcessingFolder = false; // TH√äM: Reset folder flag
    if (fileInput) fileInput.value = ""; // R·∫•t quan tr·ªçng ƒë·ªÉ reset gi√° tr·ªã input
    if (folderInput) folderInput.value = "";
    selectedDataSource = null;
    currentFileMetadata = null; // RESET METADATA

    const uploadOption = document.getElementById('uploadOption');
    if (uploadOption) {
        uploadOption.style.display = 'block';
    }
    if (metadataPreviewBox) metadataPreviewBox.style.display = 'none';
    if (saveToMinioBtn) saveToMinioBtn.style.display = 'none';
    if (startProcessingBtn) {
        startProcessingBtn.style.display = 'none'; // ·∫®n n√∫t Start
        startProcessingBtn.classList.remove('btn-primary'); // X√≥a m√†u active
        startProcessingBtn.classList.add('btn-secondary'); // ƒê·∫∑t l·∫°i m√†u x√°m
        startProcessingBtn.disabled = true; // V√¥ hi·ªáu h√≥a n√∫t
    }
    if (saveAllToMinioBtn) saveAllToMinioBtn.style.display = 'none';
    if (sourceStatus) sourceStatus.style.display = 'none';
    if (folderInfoBox) folderInfoBox.style.display = 'none'; // TH√äM
    if (folderNavigationButtons) folderNavigationButtons.style.display = 'none'; // TH√äM
    // Reset progress steps
    resetProgressSteps();
    // ·∫®n k·∫øt qu·∫£ cu·ªëi c√πng
    if (finalResults) finalResults.style.display = 'none';

    // Reset Select2 selection
    if (minioFolderSelect) {
        $(minioFolderSelect).val(null).trigger('change');
    }

    // Reset simulated results
    simulatedTotalFilesProcessed = 0;
    simulatedSuccessfullyDownloadedFiles = 0;
    simulatedFailedDownloadFiles = [];
    simulatedTotalChunksGenerated = 0;
    simulatedTotalProcessingTimeMs = 0;
    simulatedProcessStartTime = null;

    // ·∫®n khung processing
    if (processingSection) processingSection.style.display = 'none';
    showInitialForms(); // ƒê·∫£m b·∫£o defaultMessage hi·ªÉn th·ªã l·∫°i n·∫øu c·∫ßn
}

// --- Folder from MinIO
// ƒê·ªïi t√™n h√†m cho MinIO selection
// H√†m cho MinIO folder selection (ƒë·ªïi t√™n ƒë·ªÉ tr√°nh tr√πng)
function handleMinioFolderSelection(e) {
    const selectedValue = $(this).val();
    if (selectedValue) {
        selectedDataSource = 'minio';
        // Reset folder upload data
        isProcessingFolder = false;
        folderFiles = [];
        folderMetadataList = [];
        currentFolderFileIndex = 0;
        
        updateSourceStatus(`ƒê√£ ch·ªçn folder: ${selectedValue}`);
        showStartButton();
        
        // ·∫®n th√¥ng tin folder upload n·∫øu c√≥
        if (folderInfoBox) folderInfoBox.style.display = 'none';
        if (folderNavigationButtons) folderNavigationButtons.style.display = 'none';
        if (metadataPreviewBox) metadataPreviewBox.style.display = 'none';
        if (saveToMinioBtn) saveToMinioBtn.style.display = 'none';
        if (saveAllToMinioBtn) saveAllToMinioBtn.style.display = 'none';
        
        // ƒê·∫£m b·∫£o ph·∫ßn upload file reset
        const uploadOption = document.getElementById('uploadOption');
        if (uploadOption) uploadOption.style.display = 'block';
        if (fileInput) fileInput.value = '';
        if (folderInput) folderInput.value = ''; // TH√äM d√≤ng n√†y
        selectedFiles = [];
        currentFileMetadata = null;
    } else {
        selectedDataSource = null;
        updateSourceStatus(`Ch∆∞a ch·ªçn folder t·ª´ MinIO`);
        if (startProcessingBtn) {
            startProcessingBtn.style.display = 'none';
            startProcessingBtn.classList.remove('btn-primary');
            startProcessingBtn.classList.add('btn-secondary');
            startProcessingBtn.disabled = true;
        }
        if (defaultMessage) defaultMessage.style.display = 'block';
        minioFilesToProcess = [];
    }
    // ·∫®n khung processing v√† k·∫øt qu·∫£ khi thay ƒë·ªïi l·ª±a ch·ªçn ngu·ªìn
    if (processingSection) processingSection.style.display = 'none';
    if (finalResults) finalResults.style.display = 'none';
    resetProgressSteps();
}

// V√† update trong initializeEventListeners:
if (minioFolderSelect) {
    $(minioFolderSelect).on('change', handleMinioFolderSelection); // S·ª¨A T√äN H√ÄM
}
function loadFolderList() {
    if (loadFolderButton) {
        loadFolderButton.disabled = true;
        loadFolderButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> ƒêang t·∫£i...';
    }

    fetch('/api/minio-folders')
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok ' + response.statusText);
            }
            return response.json();
        })
        .then(data => {
            const newOptions = [{ id: '', text: '-- Ch·ªçn folder --' }];
            if (data.status === 'success' && data.folders.length > 0) {
                data.folders.forEach(folder => {
                    newOptions.push({
                        id: folder,
                        text: folder.endsWith('/') ? folder.slice(0, -1) : folder
                    });
                });
                console.log('Folders loaded:', data.folders);
            } else {
                console.log('No folders found in MinIO bucket.');
            }

            $(minioFolderSelect).empty().select2({
                placeholder: "-- Ch·ªçn folder --",
                allowClear: true,
                data: newOptions,
                templateResult: formatFolderOption,
                templateSelection: formatFolderOption
            });
        })
        .catch(error => {
            console.error('There was a problem with the fetch operation:', error);
            alert('Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server ho·∫∑c c√≥ l·ªói x·∫£y ra khi t·∫£i folder.');
        })
        .finally(() => {
            if (loadFolderButton) {
                loadFolderButton.disabled = false;
                loadFolderButton.innerHTML = '<i class="fas fa-sync-alt"></i> T·∫£i danh s√°ch folder';
            }
        });
}

// --- UI update
function updateSourceStatus(message) {
    if (sourceInfo) sourceInfo.textContent = message;
    if (sourceStatus) sourceStatus.style.display = 'block';
}

// H√†m n√†y d√πng ƒë·ªÉ c·∫≠p nh·∫≠t text trong c√°c b∆∞·ªõc x·ª≠ l√Ω (stepBox)
function updateStepDescription(stepId, message) {
    const stepElement = document.getElementById(stepId);
    if (stepElement) {
        const description = stepElement.querySelector('.step-description');
        if (description) description.textContent = message;
    }
}

function showStartButton() {
    if (startProcessingBtn) {
        startProcessingBtn.style.display = 'inline-flex';
        // ƒê·∫£m b·∫£o n√∫t ƒë∆∞·ª£c k√≠ch ho·∫°t v√† c√≥ m√†u t√≠m
        startProcessingBtn.classList.remove('btn-secondary');
        startProcessingBtn.classList.add('btn-primary');
        startProcessingBtn.disabled = false; // K√≠ch ho·∫°t n√∫t
    }
    if (defaultMessage) defaultMessage.style.display = 'none'; // ·∫®n tin nh·∫Øn m·∫∑c ƒë·ªãnh khi n√∫t start hi·ªán ra
    if (finalResults) finalResults.style.display = 'none'; // ƒê·∫£m b·∫£o k·∫øt qu·∫£ c≈© ·∫©n
    resetProgressSteps();
}

function resetProgressSteps() {
    const steps = ['stepBox1', 'stepBox2', 'stepBox3', 'stepBox4', 'stepBox5'];
    const arrows = ['arrow1', 'arrow2', 'arrow3', 'arrow4'];

    steps.forEach(stepId => {
        const step = document.getElementById(stepId);
        if (step) {
            step.className = 'progress-step-box pending';
            const description = step.querySelector('.step-description');
            if (description) description.textContent = 'ƒêang ch·ªù...';
        }
    });

    arrows.forEach(arrowId => {
        const arrow = document.getElementById(arrowId);
        if (arrow) arrow.className = 'progress-arrow';
    });

    if (loadDataDescription) {
        loadDataDescription.textContent = 'ƒêang ch·ªù...';
    }
    
    // Reset vector database info
    window.vectorDatabaseInfo = null;
}
// TH√äM: L∆∞u vector database info v√†o global variable
function storeVectorDatabaseInfo(vectorDbInfo) {
    if (vectorDbInfo) {
        window.vectorDatabaseInfo = vectorDbInfo;
        console.log('Stored vector database info:', vectorDbInfo);
    }
}
// --- Processing (MAIN LOGIC) ---
async function startProcessing() {
    // ƒêi·ªÅu ki·ªán ƒë·ªÉ b·∫Øt ƒë·∫ßu x·ª≠ l√Ω
    if (selectedDataSource === 'upload' && !currentFileMetadata) {
        alert('Vui l√≤ng ƒë·ª£i qu√° tr√¨nh suy lu·∫≠n metadata ho√†n t·∫•t v√† l∆∞u file v√†o MinIO tr∆∞·ªõc khi x·ª≠ l√Ω.');
        return;
    }
    // Ki·ªÉm tra cho folder upload
    if (selectedDataSource === 'folder-upload' && folderMetadataList.length === 0) {
        alert('Vui l√≤ng ƒë·ª£i qu√° tr√¨nh suy lu·∫≠n metadata ho√†n t·∫•t v√† l∆∞u t·∫•t c·∫£ file v√†o MinIO tr∆∞·ªõc khi x·ª≠ l√Ω.');
        return;
    }

    if (!selectedDataSource) {
        alert('Vui l√≤ng ch·ªçn ngu·ªìn d·ªØ li·ªáu tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu x·ª≠ l√Ω!');
        return;
    }

    // Reset simulated results for a new run
    simulatedTotalFilesProcessed = 0;
    simulatedSuccessfullyDownloadedFiles = 0;
    simulatedFailedDownloadFiles = [];
    simulatedTotalChunksGenerated = 0;
    simulatedTotalProcessingTimeMs = 0;
    simulatedProcessStartTime = Date.now();

    showProcessingSection();
    if (startProcessingBtn) {
        startProcessingBtn.style.display = 'none';
        startProcessingBtn.classList.remove('btn-primary');
        startProcessingBtn.classList.add('btn-secondary');
        startProcessingBtn.disabled = true;
    }
    if (finalResults) finalResults.style.display = 'none';
    resetProgressSteps();

    // Set initial text for step 1 detailed log
    if (loadDataDescription) loadDataDescription.textContent = 'ƒêang kh·ªüi t·∫°o qu√° tr√¨nh t·∫£i file...';

    try {
        if (selectedDataSource === 'minio') {
            const selectedFolder = $(minioFolderSelect).val();
            if (!selectedFolder) {
                alert('Vui l√≤ng ch·ªçn m·ªôt folder MinIO h·ª£p l·ªá.');
                return;
            }
            await loadMinIOFiles(selectedFolder);
        } else if (selectedDataSource === 'minio-saved-file') {
            if (minioFilesToProcess.length === 0) {
                alert('Kh√¥ng t√¨m th·∫•y th√¥ng tin file ƒë√£ l∆∞u ƒë·ªÉ x·ª≠ l√Ω.');
                return;
            }
            console.log("Processing a single file recently saved to MinIO:", minioFilesToProcess[0].name);
            
            // S·ª¨A: G·ªçi real pipeline thay v√¨ downloadMinioFile
            await processFileWithRealPipeline(minioFilesToProcess[0].object_name);
            
        } else if (selectedDataSource === 'minio-saved-folder') {
            if (minioFilesToProcess.length === 0) {
                alert('Kh√¥ng t√¨m th·∫•y th√¥ng tin folder ƒë√£ l∆∞u ƒë·ªÉ x·ª≠ l√Ω.');
                return;
            }
            console.log(`Processing ${minioFilesToProcess.length} files from saved folder`);
            
            // S·ª¨A: Ch·ªçn file ƒë·∫°i di·ªán v√† ch·∫°y pipeline
            if (minioFilesToProcess.length > 0) {
                const representativeFile = minioFilesToProcess[0].object_name;
                await processFileWithRealPipeline(representativeFile);
            }
        } else {
            alert('Ngu·ªìn d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá ho·∫∑c ch∆∞a s·∫µn s√†ng ƒë·ªÉ x·ª≠ l√Ω. Vui l√≤ng th·ª≠ l·∫°i.');
            return;
        }

    } catch (error) {
        console.error("L·ªói trong qu√° tr√¨nh x·ª≠ l√Ω:", error);
        if (stepBox1) {
            stepBox1.classList.remove('active', 'in-progress', 'completed');
            stepBox1.classList.add('error');
            const description = stepBox1.querySelector('.step-description');
            if (description) description.textContent = `L·ªói t·∫£i: ${error.message || 'Kh√¥ng x√°c ƒë·ªãnh'}`;
        }
        if (arrow1) arrow1.className = 'progress-arrow error';
        showFinalResults(false);
    }
}


// TH√äM: H√†m m·ªõi ƒë·ªÉ x·ª≠ l√Ω single file v·ªõi real pipeline
async function processFileWithRealPipeline(objectName) {
    console.log(`üöÄ Processing single file with real pipeline: ${objectName}`);
    
    // Step 1: Mark as active
    if (stepBox1) {
        stepBox1.classList.remove('pending');
        stepBox1.classList.add('active');
    }
    if (arrow1) arrow1.classList.add('active');
    if (loadDataDescription) {
        loadDataDescription.textContent = `Chu·∫©n b·ªã x·ª≠ l√Ω file: ${objectName.split('/').pop()}`;
    }
    
    // Step 1: Complete immediately for single file
    simulatedTotalFilesProcessed = 1;
    simulatedSuccessfullyDownloadedFiles = 1;
    
    if (loadDataDescription) {
        loadDataDescription.textContent = `‚úÖ ƒê√£ chu·∫©n b·ªã file: ${objectName.split('/').pop()}`;
    }
    if (stepBox1) {
        stepBox1.classList.remove('active');
        stepBox1.classList.add('completed');
    }
    if (arrow1) arrow1.classList.add('completed');
    
    // B·∫Øt ƒë·∫ßu real pipeline processing
    await startRealPipelineProcessing(objectName);
}

// ORIGINAL FUNCTION: Load files from MinIO folder
// UPDATED FUNCTION: Load files from MinIO folder v√† ch·∫°y pipeline
async function loadMinIOFiles(folderPrefix) {
    if (loadDataDescription) loadDataDescription.textContent = 'ƒêang t·∫£i danh s√°ch file t·ª´ MinIO...';
    if (stepBox1) {
        stepBox1.classList.remove('pending');
        stepBox1.classList.add('active');
    }
    if (arrow1) arrow1.classList.add('active');

    simulatedSuccessfullyDownloadedFiles = 0;
    simulatedFailedDownloadFiles = [];

    try {
        // 1. L·∫•y danh s√°ch file t·ª´ MinIO
        const response = await fetch(`/api/minio-files?prefix=${encodeURIComponent(folderPrefix)}`);
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(`Server error: ${response.status} - ${errorData.message}`);
        }
        const data = await response.json();

        simulatedTotalFilesProcessed = data.files.length;

        if (data.status === 'success' && data.files.length > 0) {
            minioFilesToProcess = data.files;
            console.log(`Found ${minioFilesToProcess.length} files in MinIO folder '${folderPrefix}'.`);

            // 2. L·∫•y file ƒë·∫°i di·ªán ƒë·ªÉ x·ª≠ l√Ω pipeline
            if (loadDataDescription) {
                loadDataDescription.textContent += `\nüîç T√¨m file ƒë·∫°i di·ªán ƒë·ªÉ x·ª≠ l√Ω...`;
            }

            const repFileResponse = await fetch('/api/get-representative-file', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ folder_prefix: folderPrefix })
            });

            if (repFileResponse.ok) {
                const repFileData = await repFileResponse.json();
                if (repFileData.success) {
                    representativeFile = repFileData.representative_file;
                    
                    if (loadDataDescription) {
                        loadDataDescription.textContent += `\nüìÑ File ƒë·∫°i di·ªán: ${repFileData.file_name}`;
                        loadDataDescription.textContent += `\nüöÄ B·∫Øt ƒë·∫ßu pipeline processing...`;
                    }

                    // 3. Ho√†n th√†nh step 1
                    simulatedSuccessfullyDownloadedFiles = minioFilesToProcess.length;
                    let finalMessage = `ƒê√£ t·∫£i t·∫•t c·∫£ ${simulatedSuccessfullyDownloadedFiles} file t·ª´ MinIO.`;
                    
                    updateStepDescription('stepBox1', finalMessage);
                    if (stepBox1) {
                        stepBox1.classList.remove('active');
                        stepBox1.classList.add('completed');
                    }
                    if (arrow1) arrow1.classList.add('completed');

                    // 4. B·∫Øt ƒë·∫ßu pipeline v·ªõi file ƒë·∫°i di·ªán
                    await startRealPipelineProcessing(representativeFile);
                    
                } else {
                    throw new Error("Kh√¥ng t√¨m th·∫•y file h·ªó tr·ª£ ƒë·ªÉ x·ª≠ l√Ω");
                }
            } else {
                throw new Error("Kh√¥ng th·ªÉ l·∫•y file ƒë·∫°i di·ªán");
            }

        } else {
            minioFilesToProcess = [];
            simulatedTotalFilesProcessed = 0;
            simulatedSuccessfullyDownloadedFiles = 0;
            if (loadDataDescription) loadDataDescription.textContent = 'Kh√¥ng t√¨m th·∫•y file n√†o trong folder MinIO.';
            if (stepBox1) {
                stepBox1.classList.remove('active');
                stepBox1.classList.add('completed-with-warnings');
            }
            if (arrow1) arrow1.classList.add('completed');
            console.warn('Kh√¥ng c√≥ file ƒë·ªÉ x·ª≠ l√Ω trong folder ƒë√£ ch·ªçn.');
            
            // V·∫´n hi·ªÉn th·ªã final results ngay c·∫£ khi kh√¥ng c√≥ file
            showFinalResults(true);
        }
    } catch (error) {
        console.error('L·ªói khi t·∫£i danh s√°ch file ho·∫∑c x·ª≠ l√Ω pipeline t·ª´ MinIO:', error);
        if (loadDataDescription) loadDataDescription.textContent = `L·ªói: ${error.message}`;
        if (stepBox1) {
            stepBox1.classList.remove('active');
            stepBox1.classList.add('error');
        }
        if (arrow1) arrow1.classList.add('error');
        showFinalResults(false);
        throw error;
    }
}

// ORIGINAL FUNCTION: Download a single file from MinIO
async function downloadMinioFile(objectName, fileName, currentCount, totalCount) {
    const currentLogLine = `ƒêang t·∫£i: ${fileName} (${currentCount}/${totalCount})\n`;
    if (loadDataDescription) {
        loadDataDescription.textContent += currentLogLine;
        loadDataDescription.scrollTop = loadDataDescription.scrollHeight;
    }

    try {
        const response = await fetch('/api/download-minio-file', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ object_name: objectName })
        });
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(`Server error: ${response.status} - ${errorData.message}`);
        }
        const result = await response.json();
        if (result.status !== 'success') {
            throw new Error(result.message);
        }
        console.log(`ƒê√£ t·∫£i file ${fileName} v·ªÅ: ${result.local_path}`);

        if (loadDataDescription) {
            loadDataDescription.textContent = loadDataDescription.textContent.replace(
                currentLogLine.trim(),
                `‚úÖ ƒê√£ t·∫£i: ${fileName}`
            ) + '\n';
            loadDataDescription.scrollTop = loadDataDescription.scrollHeight;
        }

    } catch (error) {
        console.error(`L·ªói khi t·∫£i file ${fileName}:`, error);
        if (loadDataDescription) {
            loadDataDescription.textContent = loadDataDescription.textContent.replace(
                currentLogLine.trim(),
                `‚ùå L·ªói t·∫£i ${fileName}: ${error.message}`
            ) + '\n';
            loadDataDescription.scrollTop = loadDataDescription.scrollHeight;
        }
        throw error;
    }
}

// H√ÄM N√ÄY 
// TH√äM: H√†m m·ªõi ƒë·ªÉ ch·∫°y real pipeline processing
// TH√äM: C·∫≠p nh·∫≠t startRealPipelineProcessing ƒë·ªÉ l∆∞u vector database info
async function startRealPipelineProcessing(objectName) {
    console.log(`üöÄ Starting real pipeline processing for: ${objectName}`);
    
    // Close any existing event source
    if (pipelineEventSource) {
        pipelineEventSource.close();
    }

    // Reset vector database info
    window.vectorDatabaseInfo = null;

    // S·ª≠ d·ª•ng SSE ƒë·ªÉ nh·∫≠n progress real-time
    try {
        const response = await fetch('/api/process-pipeline-stream', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ object_name: objectName })
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const reader = response.body.getReader();
        const decoder = new TextDecoder();

        while (true) {
            const { done, value } = await reader.read();
            if (done) break;

            const chunk = decoder.decode(value);
            const lines = chunk.split('\n');

            for (const line of lines) {
                if (line.startsWith('data: ')) {
                    try {
                        const data = JSON.parse(line.slice(6));
                        
                        // TH√äM: L∆∞u vector database info n·∫øu c√≥
                        if (data.results && data.results.vector_database) {
                            storeVectorDatabaseInfo(data.results.vector_database);
                        }
                        
                        handlePipelineProgress(data);
                    } catch (e) {
                        console.error('Error parsing SSE data:', e);
                    }
                }
            }
        }

    } catch (error) {
        console.error('Error in pipeline processing:', error);
        // Handle error - mark current step as failed
        const activeStep = document.querySelector('.progress-step-box.active');
        if (activeStep) {
            activeStep.classList.remove('active');
            activeStep.classList.add('error');
            const description = activeStep.querySelector('.step-description');
            if (description) description.textContent = `L·ªói: ${error.message}`;
        }
        showFinalResults(false);
    }
}


// TH√äM: H√†m x·ª≠ l√Ω progress t·ª´ pipeline
function handlePipelineProgress(data) {
    console.log('Pipeline progress:', data);

    if (data.step) {
        const stepId = `stepBox${data.step}`;
        const stepElement = document.getElementById(stepId);
        const arrowId = `arrow${data.step}`;
        const arrowElement = document.getElementById(arrowId);

        if (stepElement) {
            const description = stepElement.querySelector('.step-description');

            // Reset classes
            stepElement.classList.remove('pending', 'active', 'completed', 'error', 'completed-with-warnings');
            
            if (data.status === 'active') {
                stepElement.classList.add('active');
                if (description) description.textContent = data.message;
                
                if (arrowElement) {
                    arrowElement.classList.remove('pending', 'completed', 'error');
                    arrowElement.classList.add('active');
                }
                
                // Special handling cho MongoDB step
                if (data.step === 5) {
                    console.log('üóÑÔ∏è MongoDB save step started');
                }
                
            } else if (data.status === 'completed') {
                stepElement.classList.add('completed');
                if (description) description.textContent = data.message;
                
                if (arrowElement) {
                    arrowElement.classList.remove('active');
                    arrowElement.classList.add('completed');
                }
                
                // Special handling cho MongoDB completion
                if (data.step === 5) {
                    console.log('‚úÖ MongoDB save step completed successfully');
                }
                
            } else if (data.status === 'error') {
                stepElement.classList.add('error');
                if (description) description.textContent = data.message;
                
                if (arrowElement) {
                    arrowElement.classList.remove('active');
                    arrowElement.classList.add('error');
                }
                
                // Special handling cho MongoDB errors
                if (data.step === 5) {
                    console.error('‚ùå MongoDB save step failed:', data.message);
                }
            }
        }
    } else if (data.success !== undefined) {
        // Final result
        if (data.success) {
            // Update simulated results for final display
            if (data.results) {
                simulatedTotalChunksGenerated = data.results.total_chunks || 0;
                simulatedTotalProcessingTimeMs = (data.results.processing_time || 0) * 1000;
                simulatedSuccessfullyDownloadedFiles = simulatedTotalFilesProcessed;
                
                // ENHANCED: L∆∞u th√¥ng tin MongoDB v·ªõi enhanced data
                if (data.results.mongodb) {
                    window.mongodbInfo = data.results.mongodb;
                    mongodbInfo = data.results.mongodb; // Backup reference
                    console.log('üìä MongoDB Info received:', data.results.mongodb);
                }
                
                // Log vector database info n·∫øu c√≥
                if (data.results.vector_database) {
                    window.vectorDatabaseInfo = data.results.vector_database;
                    console.log('üóÇÔ∏è Vector Database Info:', data.results.vector_database);
                }
            }
            showFinalResults(true);
        } else {
            // Handle MongoDB error trong final result
            if (data.mongodb) {
                window.mongodbInfo = data.mongodb;
                mongodbInfo = data.mongodb;
            }
            showFinalResults(false);
        }
    }
}

// TH√äM: H√†m helper ƒë·ªÉ cleanup pipeline resources
function cleanupPipelineResources() {
    if (pipelineEventSource) {
        pipelineEventSource.close();
        pipelineEventSource = null;
    }
    representativeFile = null;
}

// UPDATED: Modify resetUpload to cleanup pipeline resources
function resetUpload() {
    selectedFiles = [];
    minioFilesToProcess = [];
    folderFiles = [];
    folderMetadataList = [];
    currentFolderFileIndex = 0;
    isProcessingFolder = false;
    
    // TH√äM: Cleanup pipeline resources
    cleanupPipelineResources();
    
    if (fileInput) fileInput.value = "";
    if (folderInput) folderInput.value = "";
    selectedDataSource = null;
    currentFileMetadata = null;

    const uploadOption = document.getElementById('uploadOption');
    if (uploadOption) {
        uploadOption.style.display = 'block';
    }
    if (metadataPreviewBox) metadataPreviewBox.style.display = 'none';
    if (saveToMinioBtn) saveToMinioBtn.style.display = 'none';
    if (startProcessingBtn) {
        startProcessingBtn.style.display = 'none';
        startProcessingBtn.classList.remove('btn-primary');
        startProcessingBtn.classList.add('btn-secondary');
        startProcessingBtn.disabled = true;
    }
    if (saveAllToMinioBtn) saveAllToMinioBtn.style.display = 'none';
    if (sourceStatus) sourceStatus.style.display = 'none';
    if (folderInfoBox) folderInfoBox.style.display = 'none';
    if (folderNavigationButtons) folderNavigationButtons.style.display = 'none';
    
    resetProgressSteps();
    if (finalResults) finalResults.style.display = 'none';

    if (minioFolderSelect) {
        $(minioFolderSelect).val(null).trigger('change');
    }

    // Reset simulated results
    simulatedTotalFilesProcessed = 0;
    simulatedSuccessfullyDownloadedFiles = 0;
    simulatedFailedDownloadFiles = [];
    simulatedTotalChunksGenerated = 0;
    simulatedTotalProcessingTimeMs = 0;
    simulatedProcessStartTime = null;

    if (processingSection) processingSection.style.display = 'none';
    showInitialForms();
}

// Modified: Simulate remaining steps after files are "loaded"
// function simulateRemainingProcessing() {
//     const steps = [
//         { id: 'stepBox2', title: 'Data Extraction', processing: 'ƒêang tr√≠ch xu·∫•t n·ªôi dung...', completed: 'ƒê√£ tr√≠ch xu·∫•t n·ªôi dung' },
//         { id: 'stepBox3', title: 'Chunking', processing: 'ƒêang chia nh·ªè d·ªØ li·ªáu...', completed: 'ƒê√£ chia nh·ªè d·ªØ li·ªáu' },
//         { id: 'stepBox4', title: 'Embedding', processing: 'ƒêang t·∫°o embedding...', completed: 'ƒê√£ t·∫°o embedding' },
//         { id: 'stepBox5', title: 'L∆∞u DB', processing: 'ƒêang l∆∞u v√†o database...', completed: 'ƒê√£ l∆∞u v√†o database' }
//     ];

//     let currentStepIndex = 0;

//     function processNextRemainingStep() {
//         if (currentStepIndex >= steps.length) {
//             simulatedTotalProcessingTimeMs = Date.now() - simulatedProcessStartTime;
//             simulatedTotalChunksGenerated = simulatedSuccessfullyDownloadedFiles > 0
//                 ? simulatedSuccessfullyDownloadedFiles * Math.floor(Math.random() * (20 - 5 + 1) + 5)
//                 : 0;
//             showFinalResults(true); // T·∫•t c·∫£ b∆∞·ªõc m√¥ ph·ªèng ho√†n t·∫•t th√†nh c√¥ng
//             return;
//         }

//         const step = steps[currentStepIndex];
//         const stepElement = document.getElementById(step.id);
//         if (!stepElement) {
//             currentStepIndex++;
//             setTimeout(processNextRemainingStep, 100);
//             return;
//         }

//         const description = stepElement.querySelector('.step-description');

//         stepElement.classList.remove('pending', 'completed', 'error', 'completed-with-warnings');
//         stepElement.classList.add('active');
//         if (description) description.textContent = step.processing;

//         const arrowId = `arrow${currentStepIndex + 1}`;
//         const arrow = document.getElementById(arrowId);
//         if (arrow) {
//             arrow.classList.remove('pending', 'completed', 'error');
//             arrow.classList.add('active');
//         }

//         setTimeout(() => {
//             stepElement.classList.remove('active');
//             stepElement.classList.add('completed');
//             if (description) description.textContent = step.completed;

//             if (arrow) {
//                 arrow.classList.remove('active');
//                 arrow.classList.add('completed');
//             }

//             currentStepIndex++;
//             setTimeout(processNextRemainingStep, 500);
//         }, 2000);
//     }

//     processNextRemainingStep();
// }


// MODIFIED FUNCTION: showFinalResults to use box layout
function showFinalResults(isSuccess) {
    if (finalResults) {
        finalResults.style.display = 'block';
        if (defaultMessage) defaultMessage.style.display = 'none';

        let resultsHtml = `<h4 class="mb-3">${isSuccess ? '‚úÖ Qu√° tr√¨nh x·ª≠ l√Ω ho√†n t·∫•t!' : '‚ùå Qu√° tr√¨nh x·ª≠ l√Ω th·∫•t b·∫°i!'}</h4>`;

        const totalTimeSeconds = (simulatedTotalProcessingTimeMs / 1000).toFixed(2);

        // Main statistics grid
        resultsHtml += `
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-top: 15px;">
                <div style="background: white; padding: 15px; border-radius: 8px; text-align: center; box-shadow: 0 2px 4px rgba(0,0,0,.1);">
                    <strong>Files x·ª≠ l√Ω</strong><br>
                    <span style="color: #28a745; font-size: 1.2em;">${simulatedTotalFilesProcessed}</span>
                </div>
                <div style="background: white; padding: 15px; border-radius: 8px; text-align: center; box-shadow: 0 2px 4px rgba(0,0,0,.1);">
                    <strong>File t·∫£i th√†nh c√¥ng</strong><br>
                    <span style="color: #007bff; font-size: 1.2em;">${simulatedSuccessfullyDownloadedFiles}</span>
                </div>
                <div style="background: white; padding: 15px; border-radius: 8px; text-align: center; box-shadow: 0 2px 4px rgba(0,0,0,.1);">
                    <strong>File l·ªói t·∫£i</strong><br>
                    <span style="color: #e74c3c; font-size: 1.2em;">${simulatedFailedDownloadFiles.length}</span>
                </div>
        `;

        if (isSuccess && simulatedTotalFilesProcessed > 0) {
            resultsHtml += `
                <div style="background: white; padding: 15px; border-radius: 8px; text-align: center; box-shadow: 0 2px 4px rgba(0,0,0,.1);">
                    <strong>T·ªïng s·ªë chunks</strong><br>
                    <span style="color: #6c5ce7; font-size: 1.2em;">${simulatedTotalChunksGenerated}</span>
                </div>
                <div style="background: white; padding: 15px; border-radius: 8px; text-align: center; box-shadow: 0 2px 4px rgba(0,0,0,.1);">
                    <strong>Vector Database</strong><br>
                    <span style="color: #00b894; font-size: 1.2em;">‚úÖ Saved</span>
                </div>
            `;
        }

        resultsHtml += `
                <div style="background: white; padding: 15px; border-radius: 8px; text-align: center; box-shadow: 0 2px 4px rgba(0,0,0,.1);">
                    <strong>T·ªïng th·ªùi gian x·ª≠ l√Ω</strong><br>
                    <span style="color: #fd7e14; font-size: 1.2em;">${totalTimeSeconds} gi√¢y</span>
                </div>
            </div> `;

        // Error details if any
        if (simulatedFailedDownloadFiles.length > 0) {
            resultsHtml += `
                <h5 class="mt-4 text-danger">Chi ti·∫øt l·ªói t·∫£i file:</h5>
                <ul class="list-unstyled text-danger small">
            `;
            simulatedFailedDownloadFiles.forEach(file => {
                resultsHtml += `<li><strong>${file.fileName}:</strong> ${file.error}</li>`;
            });
            resultsHtml += `</ul>`;
        }

        // ENHANCED: MongoDB Status Section v·ªõi chunk insert details
        const mongoInfo = window.mongodbInfo || mongodbInfo;
        if (mongoInfo) {
            const mongoStatus = mongoInfo.success ? '‚úÖ Success' : '‚ùå Failed';
            const statusColor = mongoInfo.success ? '#00b894' : '#e74c3c';
            const bgColor = mongoInfo.success ? '#d4edda' : '#f8d7da';
            const textColor = mongoInfo.success ? '#155724' : '#721c24';
            
            resultsHtml += `
                <div style="margin-top: 20px; padding: 15px; border-radius: 8px; background: ${bgColor}; border-left: 4px solid ${statusColor};">
                    <h5 style="color: ${statusColor}; margin-bottom: 10px;">
                        <i class="fas fa-database"></i> MongoDB Status: ${mongoStatus}
                    </h5>
            `;
            
            if (mongoInfo.success) {
                // Success case - show chunk insert details
                resultsHtml += `
                    <div style="color: ${textColor}; font-size: 0.9em;">
                        <div style="margin-bottom: 8px;">
                            <strong>Database:</strong> 
                            <code style="background: rgba(0,0,0,0.1); padding: 2px 6px; border-radius: 3px;">${mongoInfo.database || 'edu_agent_db'}</code>
                        </div>
                        <div style="margin-bottom: 8px;">
                            <strong>Collection:</strong> 
                            <code style="background: rgba(0,0,0,0.1); padding: 2px 6px; border-radius: 3px;">${mongoInfo.collection || 'lectures'}</code>
                        </div>
                `;
                
                // TH√äM: Hi·ªÉn th·ªã th√¥ng tin chunk inserts
                if (mongoInfo.inserted_count !== undefined) {
                    resultsHtml += `
                        <div style="margin-bottom: 8px;">
                            <strong>Chunks Inserted:</strong> 
                            <span style="color: #00b894; font-weight: bold;">${mongoInfo.inserted_count}</span>
                            ${mongoInfo.total_chunks ? ` / ${mongoInfo.total_chunks}` : ''}
                        </div>
                    `;
                    
                    if (mongoInfo.failed_count && mongoInfo.failed_count > 0) {
                        resultsHtml += `
                            <div style="margin-bottom: 8px;">
                                <strong>Failed Inserts:</strong> 
                                <span style="color: #e74c3c; font-weight: bold;">${mongoInfo.failed_count}</span>
                            </div>
                        `;
                    }
                }
                
                if (mongoInfo.document_id && mongoInfo.document_id !== 'unknown') {
                    resultsHtml += `
                        <div style="margin-bottom: 8px;">
                            <strong>Sample Document ID:</strong> 
                            <code style="background: rgba(0,0,0,0.1); padding: 2px 6px; border-radius: 3px; font-size: 0.8em;">${mongoInfo.document_id}</code>
                        </div>
                    `;
                }
                
                resultsHtml += `
                        <div style="margin-bottom: 8px;">
                            <strong>Status:</strong> 
                            <span style="color: #00b894; font-weight: bold;">‚úÖ Individual chunks saved successfully</span>
                        </div>
                    </div>
                `;
                
            } else {
                // Error case - show error details
                resultsHtml += `
                    <div style="color: ${textColor}; font-size: 0.9em;">
                        <div style="margin-bottom: 8px;">
                            <strong>Error:</strong> Failed to save chunks to MongoDB
                        </div>
                `;
                
                if (mongoInfo.error) {
                    resultsHtml += `
                        <div style="margin-bottom: 8px;">
                            <strong>Details:</strong> 
                            <code style="background: rgba(0,0,0,0.1); padding: 2px 6px; border-radius: 3px; font-size: 0.8em;">${mongoInfo.error}</code>
                        </div>
                    `;
                }
                
                resultsHtml += `
                        <div style="margin-bottom: 8px;">
                            <strong>Suggestion:</strong> Check MongoDB connection and credentials
                        </div>
                    </div>
                `;
            }
            
            resultsHtml += `</div>`;
        }

        // Vector Database Info (gi·ªØ l·∫°i t·ª´ code c≈©)
        if (isSuccess && window.vectorDatabaseInfo) {
            resultsHtml += `
                <div style="margin-top: 20px; padding: 15px; border-radius: 8px; background: #e3f2fd; border-left: 4px solid #2196f3;">
                    <h5 style="color: #1976d2; margin-bottom: 10px;">
                        <i class="fas fa-database"></i> Vector Database Info:
                    </h5>
                    <div style="color: #0d47a1; font-size: 0.9em;">
                        <div style="margin-bottom: 8px;">
                            <strong>Type:</strong> ${window.vectorDatabaseInfo.type}
                        </div>
                        <div style="margin-bottom: 8px;">
                            <strong>Location:</strong> ${window.vectorDatabaseInfo.location}
                        </div>
                    </div>
                </div>
            `;
        }

        finalResultsContent.innerHTML = resultsHtml;
    }
    // ƒê·∫£m b·∫£o khung ch·ªçn d·ªØ li·ªáu v√† n√∫t "B·∫Øt ƒë·∫ßu x·ª≠ l√Ω" v·∫´n hi·ªÉn th·ªã
    if (processingSection) processingSection.style.display = 'block';
}
// TH√äM: Reset MongoDB info trong resetUpload
function resetUpload() {
    selectedFiles = [];
    minioFilesToProcess = [];
    folderFiles = [];
    folderMetadataList = [];
    currentFolderFileIndex = 0;
    isProcessingFolder = false;
    
    // Cleanup pipeline resources
    cleanupPipelineResources();
    
    if (fileInput) fileInput.value = "";
    if (folderInput) folderInput.value = "";
    selectedDataSource = null;
    currentFileMetadata = null;

    // ENHANCED: Reset MongoDB v√† Vector Database info
    window.mongodbInfo = null;
    window.vectorDatabaseInfo = null;
    mongodbInfo = null;

    const uploadOption = document.getElementById('uploadOption');
    if (uploadOption) {
        uploadOption.style.display = 'block';
    }
    if (metadataPreviewBox) metadataPreviewBox.style.display = 'none';
    if (saveToMinioBtn) saveToMinioBtn.style.display = 'none';
    if (startProcessingBtn) {
        startProcessingBtn.style.display = 'none';
        startProcessingBtn.classList.remove('btn-primary');
        startProcessingBtn.classList.add('btn-secondary');
        startProcessingBtn.disabled = true;
    }
    if (saveAllToMinioBtn) saveAllToMinioBtn.style.display = 'none';
    if (sourceStatus) sourceStatus.style.display = 'none';
    if (folderInfoBox) folderInfoBox.style.display = 'none';
    if (folderNavigationButtons) folderNavigationButtons.style.display = 'none';
    
    resetProgressSteps();
    if (finalResults) finalResults.style.display = 'none';

    if (minioFolderSelect) {
        $(minioFolderSelect).val(null).trigger('change');
    }

    // Reset simulated results
    simulatedTotalFilesProcessed = 0;
    simulatedSuccessfullyDownloadedFiles = 0;
    simulatedFailedDownloadFiles = [];
    simulatedTotalChunksGenerated = 0;
    simulatedTotalProcessingTimeMs = 0;
    simulatedProcessStartTime = null;

    if (processingSection) processingSection.style.display = 'none';
    showInitialForms();
}